<template>
  <!-- 地图数据1 -->
  <div class="mapLayerConfig">
    <div class="rightConfigTitle">
      <el-tabs v-model="activeName">
        <el-tab-pane label="站点实况" name="站点实况">
           <div class="rightConfigInfo" style="padding-bottom:0;">
              <div>
                <el-checkbox 
                  v-for="(item,i) in mapLayer" :key="i" 
                  v-model="item.checked"
                  @change="stationShowStyleChange_self(item.name)"
                >{{item.name}}</el-checkbox>
              </div>
          </div>
          <!-- 站点实况快速查询 -->
          <div class="stationLiveQuickSearch">
            <div class="searchTitle">
              <p >快速查询</p>
            </div>
            <el-form ref="form" :model="stationLiveQuickSelect" label-width="50px" label-position="left">
              <el-form-item label="时间">
                <el-date-picker
                  class="timeInput"
                  @change="stationLiveQuickTimeChange(0)"
                  v-model="stationLiveQuickSelect.time"
                  type="datetime"
                  format="yyyy-MM-dd HH:mm"
                  prefix-icon="el-icon-date"
                  placeholder="选择日期时间">
                </el-date-picker>
                <el-button @click="stationLiveQuickTimeChange(-5)" class="timeLeft" icon="el-icon-caret-left"></el-button>
                <el-button @click="stationLiveQuickTimeChange(5)" class="timeRight" icon="el-icon-caret-right"></el-button>
                <el-button @click="stationLiveQuickTimeChange(-1)" class="timeNew" >最新</el-button>
              </el-form-item>
              <el-form-item :label="item1.name" v-for="(item1, index1) in stationLiveQuickSelect.elementTypes" :key="index1">
                <el-button 
                  :type="item1.val == i ? 'primary' : ''" 
                  class="elementBtn" 
                  v-for="(item,i) in stationLiveQuickSelect.element[item1.name]" 
                  :key="i"
                  @click="item1.val = (item1.val == i ? null : i); stationShowStyleChange_self()" 
                 >{{item}}</el-button>
              </el-form-item>
            </el-form>
          </div>
          <!-- 阈值设置 -->
          <div class="stationLiveQuickSearch">
            <div class="searchTitle">
              <p >阈值设置</p>
            </div>
            <el-form :inline="true" ref="form" :model="zdskYzsz" label-width="105px" label-position="right" >
              <el-form-item :label="item1" v-for="(item1, index1) in Object.keys(zdskYzsz)" :key="index1" >
                <el-input v-model="zdskYzsz[item1]" placeholder="请输入内容" style="width: 60px"></el-input>
              </el-form-item>
            </el-form>
          </div>
          <!-- 统计查询 -->
          <div class="stationLiveQuickSearch" v-if="false">
            <div class="searchTitle">
              <p >统计查询</p>
            </div>
            <el-form ref="form" :model="zdskYzsz" label-width="80px" label-position="left">
              <el-radio style="width: 85px;" v-model="zdskTjcx.selectElement" :label="item.name" v-for="(item, index) in zdskTjcx.elements" :key="index">{{item.name}}</el-radio>
              <el-form-item label="开始时间">
                <el-date-picker
                  class="timeInput"
                  v-model="zdskTjcx.startTime"
                  type="datetime"
                  format="yyyy-MM-dd HH:00"
                  prefix-icon="el-icon-date"
                  placeholder="选择日期时间">
                </el-date-picker>
              </el-form-item>
              <el-form-item label="结束时间">
                <el-date-picker
                  class="timeInput"
                  v-model="zdskTjcx.endTime"
                  type="datetime"
                  format="yyyy-MM-dd HH:00"
                  prefix-icon="el-icon-date"
                  placeholder="选择日期时间">
                </el-date-picker>
              </el-form-item>
              <el-button style="width: 275px;" type="primary">查询</el-button>
            </el-form>
          </div>
        </el-tab-pane>
        <el-tab-pane label="网格实况" name="网格实况">
          <div class="rightConfigInfo">
              <div>
                <el-checkbox v-for="(item,i) in wgsk.showType" :key="i" v-model="item.checked">{{item.name}}</el-checkbox>
              </div>
              <div class="timeSelectBox">
                <span>时间选择</span>
                <el-date-picker
                  style="width: 150px;"
                  v-model="wgsk.time"
                  type="date"
                  format="yyyy-MM-dd"
                  prefix-icon="el-icon-date"
                  placeholder="选择日期时间">
                </el-date-picker>
                <el-select v-model="wgsk.hour" placeholder="请选择" style="width:70px;">
                  <el-option
                    v-for="item in 24"
                    :key="item"
                    :label="item>9?item:'0'+item"
                    :value="item">
                  </el-option>
                </el-select>
                <span>时</span>
                <el-button class="timeNew" >最新</el-button>
              </div>
          </div>
           <!-- 快速查询 -->
          <div class="stationLiveQuickSearch">
            <div class="searchTitle">
              <p >快速查询</p>
            </div>
            <el-form ref="form" label-width="80px" label-position="left">
              <el-button class="elementBtn elementBtnBig" v-for="(item,i) in wgsk.element" :key="i" >{{item.name}}</el-button>
            </el-form>
          </div>
        </el-tab-pane>
        <el-tab-pane label="网格预报" name="网格预报">
          <div class="rightConfigInfo">
              <div>
                <el-checkbox v-for="(item,i) in wgyb.showType" :key="i" v-model="item.checked">{{item.name}}</el-checkbox>
              </div>
              <div class="timeSelectBox">
                <span>时间选择</span>
                <el-date-picker
                  @change="initWgybInterVal"
                  style="width: 150px;"
                  v-model="wgyb.time"
                  type="date"
                  format="yyyy-MM-dd"
                  prefix-icon="el-icon-date"
                  placeholder="选择日期时间">
                </el-date-picker>
                <el-select v-model="wgyb.hour" placeholder="请选择" style="width:70px;" @change="initWgybInterVal">
                  <el-option label="08" value="8"></el-option>
                  <el-option label="20" value="20"></el-option>
                </el-select>
                <span>时</span>
              </div>
              <div class="yubaojiange">
                <span>预报间隔</span>
                <ul>
                  <li :class="wgyb.timeInterval == item?'active':''" @click="wgyb.timeInterval = item; initWgybInterVal();" v-for="(item, index) in wgyb.timeInter" :key="index">{{item}}H</li>
                </ul>
              </div>
              <div class="wgybDayHour">
                <!-- 日期时间选择 -->
                <span class="leftTime" @click="wgybIntervalPage(-1)">
                  <i class="el-icon-caret-left"></i>
                  上翻
                </span>
                <ul class="times">
                  <li v-for="(item, index) in wgyb.times[wgyb.page]" :key="index" :class="wgyb.pageIndex == index?'active':''" @click="wgyb.pageIndex = index">
                    <span class="timeDay">{{item.getDate()}}日</span>
                    <span class="timeHour">{{item.getHours() > 9 ? item.getHours() : "0" + item.getHours()}}</span>
                  </li>
                </ul>
                <span class="rightTime" @click="wgybIntervalPage(1)">
                  <i class="el-icon-caret-right"></i>
                  下翻
                </span>
              </div>
          </div>
           <!-- 快速查询 -->
          <div class="stationLiveQuickSearch">
            <div class="searchTitle">
              <p >快速查询</p>
            </div>
            <el-form ref="form" label-width="80px" label-position="left">
              <el-button class="elementBtn elementBtnBig" v-for="(item,i) in wgyb.element" :key="i" >{{item.name}}</el-button>
            </el-form>
          </div>
        </el-tab-pane>
        <el-tab-pane label="预警信号" name="预警信号">
          <div class="rightConfigInfo">
              <div class="timeSelectBox">
                <span>时间选择</span>
                <el-date-picker
                  @change="initWgybInterVal"
                  style="width: 150px;"
                  v-model="wgyb.time"
                  type="dateTime"
                  format="yyyy-MM-dd HH:mm:ss"
                  prefix-icon="el-icon-date"
                  placeholder="选择日期时间">
                </el-date-picker>
                <el-button class="timeNew" >最新</el-button>
              </div>
              <div class="yujingliebiao">
                
              </div>
          </div>
           <!-- 预警统计 -->
          <div class="stationLiveQuickSearch">
            <div class="searchTitle">
              <p >预警统计</p>
            </div>
            <el-form ref="form" label-width="80px" label-position="left">
              <ul>
                <li>大风预警  9</li>
              </ul>
            </el-form>
          </div>
        </el-tab-pane>
      </el-tabs>
    </div>
   
  </div>
</template>

<script>
import { DateGrid } from "../../api/date.js";
export default {
    data(){
        return{
          activeName : "站点实况",
          mapLayer : [
              {
                name : "国家站",
                checked : true,
                key : "gjz",
              },{
                name : "区域站",
                checked : false,
                key : "qyz",
              },{
                name : "站名",
                checked : true,
                key : "name",
              },{
                name : "站号",
                checked : false,
                key : "site",
              },{
                name : "等值线",
                checked : false,
                key : "valLine",
              },{
                name : "观测值",
                checked : true,
                key : "val",
              },{
                name : "色斑图",
                checked : false,
                key : "image",
              }
          ],
          stationLiveQuickSelect : {
            time : DateGrid(new Date(), 'yyyy-MM-dd HH:00'),
            elementTypes : [
              {name:"降水", key : "val_yl", val:4},
              {name:"温度", key : "val_wd", val:null},
              {name:"风", key : "val_wind", val:null},
              {name:"能见度", key : "val_njd", val:null}],
            element : {
              "降水":[
                "近1H","近3H","近6H","近12H",
                "1H","3H","6H","12H",
                "24H","10min","雪深"
              ],
              "温度":[
                "实时", "最高24H", "最低24H", "变温1H",
                "变温3H", "变温24H"
              ],
              "风":[
                "实时", "极大1H", "极大24H", "最大24H"
              ],
              "能见度":[
                "实时", "最低1H", "最低24H"
              ]
            }
          },
          zdskYzsz:{// 站点实况  阈值设置
            "降水（mm）" : 2.5,
            "温度（℃）" : 24,
            "风速（m/s）" : 5.5,
            "能见度（km）" : 230,
          },
          zdskTjcx : {// 站点实况 统计查询
            selectElement : "",
            elements : [
              {name : "降水"},{name : "最高温度"},{name : "最低温度"},{name : "平均气温"},
              {name : "级大风"},{name : "流域雨量"},{name : "火点监测"},{name : "降雪量"},
              {name : "最大雪深"},{name : "短时降雨"},{name : "闪电"},{name : "冰雹"},
              {name : "大风"},{name : "最小能见度"},
            ],
            startTime : new Date(new Date().getTime() - 1000*60*60*24), 
            endTime : new Date()
          },
          wgsk:{ // 网格实况
            showType : [{name:"填色"}, {name:"填值"}, {name:"等值线"}],
            time : new Date(),
            hour : new Date().getHours(),
            element : [
              {name : "10min降水"},
              {name : "1H降水"},
              {name : "3H降水"},
              {name : "2米温度"},
              {name : "2米湿度"},
              {name : "10M风场"},
            ]
          },
          wgyb:{// 网格预报
            showType : [{name:"填色"}, {name:"填值"}, {name:"等值线"}],
            time : new Date(new Date().setHours(0)),
            hour : 20,
            timeInterval : 3,
            timeInter : [3,6,9,12],
            page : 0,
            pageIndex : 0,
            times : [[]],
            element : [
              {name : "3H降水"},
              {name : "6H降水"},
              {name : "12H降水"},
              {name : "24H降水"},
              {name : "风场"},
              {name : "能见度"},
              {name : "降水相态"},
              {name : "总云量"},
              {name : "温度"},
              {name : "湿度"},
            ]
          },
          yjxh:{
            time : new Date(),
            fanwei : ['全部', '市', '县'],
            fanweiVal : '全部',
            data : [],
            count : []
          }
        }
    },
    props: {
      stationLiveTime : {// 最新数据时间
        type : Date,
        default: new Date(),
      },
      stationLiveTimeChange : {// 最新数据时间变动
        type : Function,
        default: function (data) {
          // this为空
          console.log("子组件", data, "this", this);
        },
      },
      stationShowTime : { // 显示数据时间
        type : Date,
        default: new Date(),
      },
      stationShowStyleChange : {// 查询统计内容变化
        type : Function,
        default: function (data) {
          // this为空
          console.log("子组件", data, "this", this);
        },
      },
    },
    watch: {
      stationLiveTime (newVal){ // 显示时间变动
        if(newVal != null){
          this.stationLiveQuickSelect.time = newVal;
        }
      },
    },
    created(){
      // 初始化界面之前获取数据
      this.initWgybInterVal();
      this.stationLiveQuickSelect.time = this.stationShowTime;
      this.stationShowStyleChange_self();
    },
    mounted(){
      // 界面显示完成后调用方法
    },
    methods: {
        initWgybInterVal (){// 初始化网格预报 预报间隔的数据时间
          this.wgyb.page = 0;
          this.wgyb.pageIndex = 0;
          let startTime = new Date(this.wgyb.time.getTime() + 1000*60*60*parseInt(this.wgyb.hour));
          let hour = 0;
          let data = [];
          let num = 0;
          this.wgyb.times = [];

          while(hour <= 240){
            hour += this.wgyb.timeInterval;
            startTime = new Date(startTime.getTime() + 1000*60*60*this.wgyb.timeInterval);
            data.push(startTime);
            num++;
            if(num == 8){
              num=0;
              this.wgyb.times.push(data);
              data = [];
            }
          }
          if(num!=0){
            this.wgyb.times.push(data);
          }
        },
        wgybIntervalPage(num){
          this.wgyb.page += num;
          if(this.wgyb.page < 0){
           this.wgyb.page=0;
          }else if(this.wgyb.page > this.wgyb.times.length-1){
            this.wgyb.page = this.wgyb.times.length-1;
          }
          this.wgyb.pageIndex = 0;
        },
        stationLiveQuickTimeChange(num){ // 站点实况查询时间变动
          if(num == -1){
            let time = new Date();
            let m = time.getMinutes();
            m = parseInt(m / 5) * 5;
            this.stationLiveQuickSelect.time = new Date(time.setMinutes(m));
          }else if(num == 0){
            let m = this.stationLiveQuickSelect.time.getMinutes();
            m = parseInt(m / 5) * 5;
            this.stationLiveQuickSelect.time = new Date(this.stationLiveQuickSelect.time.setMinutes(m));
          }else{
            this.stationLiveQuickSelect.time = new Date(this.stationLiveQuickSelect.time.getTime() + 1000*60*num);
          }
          if(this.stationLiveQuickSelect.time.getTime() > new Date().getTime()){
            this.stationLiveQuickTimeChange(-1);
            return;
          }
          this.stationLiveTimeChange(this.stationLiveQuickSelect.time); // 修改显示时间
        },
        stationShowStyleChange_self(){ // 站点实况查询显示内容变动
          let obj = {};
          this.mapLayer.forEach(item=>{
            obj[item.key] = item.checked;
          })
          this.stationLiveQuickSelect.elementTypes.forEach(item=>{
            obj[item.key] = item.val == null ? null : this.stationLiveQuickSelect.element[item.name][item.val];
          })
          this.stationShowStyleChange(obj);
        }
    }
}
</script>
<style scoped>
.mapLayerConfig{
  margin-bottom: 10px;
  height: calc(100% - 600px);
  overflow: auto;
}
.rightConfigTitle{
  background: #DCECFF;
  font-size: 16px;
  color: #2D5A9D;
  letter-spacing: 0;
  text-align: justify;
  line-height: 32px;
  font-weight: 600;
  height: 100%;
}
.rightConfigTitle >>> .el-tabs{
  height: 100%;
}
.rightConfigTitle >>> .el-tabs__header {
    margin: 0;
    padding: 10px 10px 0;
}
.rightConfigTitle >>> .el-tabs__nav {
  width: 100%;
}
.rightConfigTitle >>> .el-tabs__nav-wrap::after ,
.rightConfigTitle >>> .el-tabs__active-bar {
  display: none;
}
.rightConfigTitle >>> .el-tabs__content {
  height: calc(100% - 42px);
  overflow: auto;
  background: #fff;
}
.rightConfigTitle >>> .el-tabs__item {
    padding: 0;
    width: 25%;
    text-align: center;
    font-size: 16px;
    color: #333;
    font-weight: 600;
    height: 32px;
    line-height: 32px;
}

.rightConfigTitle >>> .el-tabs__item.is-active {
    background: #fff;
    border-radius: 4px 4px 0 0;
    color: #2D5A9D;
}
.rightConfigInfo{
  background: #fff;
  padding: 10px;
  line-height: 1;
}
.rightConfigInfo >>> label {
    width: 70px;
    margin-right: 10px;
    margin-bottom: 10px;
}
.rightConfigInfo >>> .el-radio__label,
.rightConfigInfo >>> .el-checkbox__label{
    color: #333;
    font-weight: 400;
}


.stationLiveQuickSearch {
    background: #fff;
    position: relative;
    padding: 0 5px;
}

.stationLiveQuickSearch .searchTitle {
    position: absolute;
    top: 1px;
    left: 5px;
    width: 32px;
    background: #DCECFF;
    bottom: 0;
    padding: 0 1px;
    text-align: center;
}

.stationLiveQuickSearch .searchTitle p {
    font-weight: 400;
    line-height: 1.2;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    margin: 0;
}

.stationLiveQuickSearch >>> .el-form-item.el-form-item--small {
    margin-bottom: 5px;
}

.stationLiveQuickSearch >>> form {
    border-top: 1px solid #F5F6F7;
    overflow: auto;
    padding: 10px 0;
    padding-left: 42px;
}

.stationLiveQuickSearch >>> .elementBtn {
    width: 70px;
    margin-left: 5px;
    margin-bottom: 5px;
    font-size: 16px;
    padding: 6px 0;
}
.stationLiveQuickSearch >>> .elementBtn.elementBtnBig {
  width: 85px;
}

.stationLiveQuickSearch >>> .timeInput {
    width: 190px;
    margin-left: 5px;
    height: 30px;
    vertical-align: middle;
    margin-top: -4px;
}

.stationLiveQuickSearch >>> .timeInput input {
    height: 30px;
    line-height: 30px;
}

.stationLiveQuickSearch >>> .timeLeft,
.stationLiveQuickSearch >>> .timeRight {
    width: 20px;
    margin-left: 5px;
    margin-right: 0;
    font-size: 16px;
    padding: 6px 0;
    vertical-align: middle;
    height: 30px;
}

.stationLiveQuickSearch >>> .timeNew {
    width: 50px;
    margin-left: 5px;
    font-size: 16px;
    padding: 6px 0;
    vertical-align: middle;
}

.stationLiveQuickSearch >>> label.el-form-item__label {
    font-weight: 400;
    color: #333;
    padding-right: 0;
}
.timeSelectBox{
  color:#333;
}
.timeSelectBox > * {
    margin-right: 8px;
}

.yubaojiange ul {
    margin: 0;
    list-style: none;
    display: inline-block;
    vertical-align: middle;
    border: 1px solid #DFE2E4;
    border-radius: 4px;
    padding: 5px;
    margin-left: 8px;
}

.yubaojiange ul li {
    display: inline-block;
    width: 56px;
    height: 24px;
    border-radius: 4px;
    text-align: center;
    line-height: 24px;
    color: #333;
    cursor: pointer;
}

.yubaojiange ul li.active {
    background: #3E87F4;
    color: #fff;
}

.yubaojiange {
    margin: 10px 0;
    color: #333;
}


.wgybDayHour ul {
    padding: 0;
    margin: 0;
    display: inline-block;
    list-style: none;
    width: 288px;
}

.wgybDayHour ul li {
    display: inline-block;
    margin: 0 2px;
    cursor: pointer;
}

.wgybDayHour ul li .timeDay {
    display: block;
    border-left: 1px solid  #ADB3BB;
    font-size: 12px !important;
    color: #5B707F;
    line-height: 16px;
    font-weight: 400;
    text-align: center;
}

.wgybDayHour ul li .timeHour {
    color: #5B707F;
    letter-spacing: 0;
    text-align: justify;
    line-height: 24px;
    font-weight: 400;
    width: 32px;
    height: 24px;
    background: #EBEEF1;
    border-radius: 4px;
    display: block;
    text-align: center;
}
.wgybDayHour ul li.active .timeHour {
    background: #3E87F4;
    color: #fff;
}

.wgybDayHour > span {
    text-align: center;
    display: inline-block;
    position: relative;
    padding-top: 20px;
    color: #333333;
    font-weight: 400;
    margin: 0 10px;
    cursor: pointer;
}

.wgybDayHour > span i {position: absolute;top: 0;left: 50%;transform: translateX(-50%);}

.wgybDayHour {
    user-select: none;
}
</style>
