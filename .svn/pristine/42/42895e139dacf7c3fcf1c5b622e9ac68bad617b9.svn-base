<template>
    <div class="content">
        <el-card class="box_card">
            <div class="header">
                <el-row>
                    <el-col :span="12">
                        <el-upload
                        action="/"
                        accept=".txt"
                        :show-file-list="false"
                        :before-upload="beforeUpload"
                        :file-list="fileList"
                        >
                        <el-button type="primary" size="medium">上传TXT文件</el-button>
                        </el-upload>
                    </el-col>
                    <el-col :span="12" style="text-align: right">
                        <el-button type="warning" size="medium" @click="downloadTxt">下载</el-button>
                        <el-button type="success" size="medium" @click="save">保存</el-button>
                        <el-button v-if="kefuFlog" type="primary" plain size="medium" @click="uploadProvince">上传至省服务器</el-button>
                        <el-button v-if="kefuFlog" type="primary" plain size="medium" @click="sendMessage">发送短信</el-button>
                    </el-col>
                </el-row>
            </div>
            <el-input
                class="textareaClass"
                type="textarea"
                v-model="value"
                :autosize="{ minRows: 20 }"
                placeholder="请输入内容"
            ></el-input>
        </el-card>
        <!-- S 预报全部水库发送弹框 -->
		<el-dialog
		:title="'群组短信发送情况'"
		:visible.sync="ybDialogVisible"
		width="30%"
		custom-class="messageDialog"
		center
		>
		<!-- 发送水库表格 -->
		<el-table
			class="statusTbale commonTable"
			height="400"
            stripe
            border
            key="messageTableKey"
			:data="YBmessageTable"
			style="width: 100%">
				<el-table-column
				prop="name"
				width="100"
				label="群组名称">
				</el-table-column>
				<el-table-column
				prop="status"
				label="发送状态">
					<template slot-scope="scope">					
						<span v-html="scope.row.status"></span>
					</template>
				</el-table-column>
				<el-table-column label="操作" width="80" align="center">
					<template slot-scope="scope">
						<el-button
							type="text"
							class="warning"
							@click="handleSeach(scope.$index, scope.row)"
							v-if="scope.row.btnShow"
						>查看</el-button>
					</template>
				</el-table-column>
			</el-table>
			<div style="text-align:center;margin-top:20px">
				<el-button type="success" @click="yb3DaySendMsgAll" :loading="YBmessageLoading">发送短信</el-button>
			</div>			
		</el-dialog>
		<!-- E 预报全部水库发送弹框 -->

        <!-- S 实况预报发送弹框 -->
		<el-dialog
		:title="messageObj.name+'短信发送情况'"
		:visible.sync="dialogVisible"
		width="30%"
		custom-class="messageDialog"
		center
		>
            <!-- 发送人数统计和发送内容 -->
            <el-row>
                <el-col :span="12" class="diaTopLeft diaTop">
                    <p>发送情况</p>
                    <ul class="clearFloat">
                        <li>
                            <span>共计发送</span>
                            <h2 style="#333333">{{messageObj.all}}人</h2>
                        </li>
                        <li>
                            <span>成功发送</span>
                            <h2 style="color:#00DE65">{{messageObj.success}}人</h2>
                        </li>
                        <li>
                            <span>失败发送</span>
                            <h2 style="color:#FF5454">{{messageObj.error}}人</h2>
                        </li>
                    </ul>
                </el-col>
                <el-col :span="12" class="diaTopLeft diaTop">
                    <p>发送内容</p>
                    <div ref="ybMsg">{{messageObj.content}}</div>
                </el-col>
            </el-row>
            <div class="line"></div>
            <!-- 发送人员表格 -->
            <el-table
                class="statusTbale commonTable"
                :data="messageObj.table"
                stripe
                border
                height="200"
                style="width: 100%">
                <el-table-column
                prop="name"
                label="姓名">
                </el-table-column>
                <el-table-column
                prop="mobile"
                label="手机">
                </el-table-column>
                <el-table-column
                prop="status"
                label="发送状态">
                    <template slot-scope="scope">
                        <span v-html="scope.row.status"></span>
                    </template>
                </el-table-column>
                <el-table-column
                prop="msg"
                label="原因">
                </el-table-column>
            </el-table>
		</el-dialog>
		<!-- E 实况预报发送弹框 -->
    </div>
</template>
<script>
import { saveAs } from "file-saver";
import { txtFileSetting } from "@/minx"
import service from "@/api/request"
export default {
    name: "TxtEditor",
    props: {
        name: {
            type: String,
            default: "下载",
        },
    },
    data() {
        return {
            value: "",
            fileList: [],
            kefuFlog: false,
            ybDialogVisible: false,
            YBmessageTable: [],
            YBmessageLoading: false,
            sendHtml: "<div class='cont'><div class='twill'></div><div class='info'>发送中</div></div>",
            dialogVisible: false,
            messageObj: {
                all: 0,
                success: 0,
                error: 0,
                name: "-",
                title: '实况',
                content: '',
                btnShow: false,
                table: [],
                code: null,
                loading: false
            },
            messageTableKey: 1
        }
    },
    mixins: [txtFileSetting],
    mounted() {
        let user = JSON.parse(localStorage.getItem("lcqxfzjz"))
        if(user.roleInfo.id==2){
            this.kefuFlog = true
        }
        this.getData()
        this.getDivision()
    },
    methods: {
        getDivision() {//获取区划数据   
            service.post("/baseUserRegion/list").then((res) => {
                if(res.data.state==200){
                    this.YBmessageTable = []
                    res.data.records.forEach((item) => {
                        if (item.parentId == 1) {
                            this.YBmessageTable.push(item)
                        }
                    })
                }               
            })
        },
        getData() {//获取数据
            let user = JSON.parse(localStorage.getItem("lcqxfzjz"))
            service.post("/productWeatherCity/getCityWeather",{
                size: 1,
                regionId: user.userRegion.id,
                roleId: user.roleInfo.id,
            }).then((res) => {
                if(res.data.state==200){
                    this.data = res.data.records[0]
                    let content = res.data.records[0].content
                    if(content.includes("/n")){
                        this.value = content.replaceAll("/n","\n")
                    }else{
                        this.value = content
                    }                  
                }                
            })
        },
        save() {//保存
            let user = JSON.parse(localStorage.getItem("lcqxfzjz"))
            if (!this.value) {
                this.$message.error("内容不能为空")
                return;
            }
            service.post("/productWeatherCity/update",{
                time: this.data.time,
                content: this.value,
                id: this.data.id,
                regionId: user.userRegion.id,
                roleId: user.roleInfo.id,
            }).then((res) => {
                if(res.data.state==200){
                    this.$message.success("保存成功")
                    this.getData()
                }               
            })
        },
        downloadTxt() {//下载txt文件            
            let str = this.value
            let strData = new Blob([str], { type: "text/plain;charset=utf-8" })
            saveAs(strData, `未来24小时城市天气预报.txt`)
        },
        uploadProvince(){//上传至省服务器
            if (!this.data.id) {
                this.$message.error("请先完成保存")
                return;
            }
            service.post("/productWeatherCity/upload",{
                id: this.data.id
            }).then((res) => {
                if(res.data.state==200){
                    this.$message.success("上传成功")
                }               
            })
        },
        sendMessage(){//发送短信
            if (!this.value) {
                this.$message.error("内容不能为空")
                return;
            }
            if (!this.data.id) {
                this.$message.error("请先完成保存")
                return;
            }
            this.YBmessageTable.forEach((item)=>{
				item.status = "";
				item.btnShow = false;
				item.content = "";
				item.all = 0;
				item.success = 0;
				item.error = 0;
			})
            this.ybDialogVisible = true
        },
        // 查看操作
		handleSeach(index, row){
			this.messageObj.name = row.name
			this.messageObj.title = "预报"
			this.messageObj.code = row.code
			this.messageObj.all = 0
			this.messageObj.success = 0
			this.messageObj.error = 0
			this.messageObj.content = this.value
			this.messageObj.btnShow = false
			this.dialogVisible = true
			this.switchMessageStatus()
		},
        // 全部水库一键发送未来三天数据,2、发送短信
		yb3DaySendMsgAll(){
			this.YBmessageCode = []
			this.YBmessageNum = 0

            this.YBmessageLoading = true
            service.post("/smsUserinfo/sendManySms",{
                content: this.value,
                type: 1
            }).then((res) => {
                if(res.data.state==200){
                    let dataArray = res.data.records;                    
                    for(var j=0;j<this.YBmessageTable.length;j++){
                        let flog = false
                        for(var i=0;i<dataArray.length;i++){
                            if(dataArray[i].other == this.YBmessageTable[j]["id"]){                                
                                if(dataArray[i].state==200){
                                    this.YBmessageCode.push(dataArray[i].records)
                                    this.YBmessageTable[j]["code"] = dataArray[i].records
                                    this.YBmessageTable[j]["status"] = this.sendHtml
                                    this.YBmessageTable[j]["btnShow"] = true
                                }else{
                                    this.YBmessageTable[j]["status"] = dataArray[i].message
                                }
                                flog = true
                            }
                        }
                        if(!flog){
                            this.YBmessageTable[j]["status"] = "暂未配置短信人员"
                        }
                    }
                    this.messageTableKey++
                    if(this.YBmessageCode.length != 0){
                        setTimeout(()=>{
                            this.ybMessageStatus();
                        },5000)	
                    }else{
                        this.YBmessageLoading = false
                    }
                }else{
                    this.YBmessageLoading = false
                    this.$message.error(`发送异常！`);	
                    this.YBmessageTable.forEach((item)=>{
                        item.status = "失败";
                    })						
                }                
            })
		},
        // 全部水库一键发送，循环判断短信状态
		ybMessageStatus(){
			if(!this.ybDialogVisible){
				return
			}
			if(this.YBmessageCode.length == this.YBmessageNum){
				let flog = false
				for(let i=0;i<this.YBmessageTable.length;i++){				
					if(this.YBmessageTable[i].all){
						let all = this.YBmessageTable[i].success+this.YBmessageTable[i].error;
						if(all!=this.YBmessageTable[i].all){
							flog = true
						}else{
							if(this.YBmessageTable[i].success == this.YBmessageTable[i].all){
								this.YBmessageTable[i]["status"] = "<span style='color:#00DE65'>成功</span>"
							}else{
								this.YBmessageTable[i]["status"] = "<span style='color:#FF5454'>失败"+this.YBmessageTable[i].error+"</span>"
							}						
						}
					}					
				}
				if(flog){
					this.YBmessageNum = 0;
					setTimeout(()=>{
						this.ybMessageStatus();
					},5000)	
				}else{
					this.YBmessageLoading = false
				}
			}else{
				let code = this.YBmessageCode[this.YBmessageNum];
				for(let i=0;i<this.YBmessageTable.length;i++){
					if(this.YBmessageTable[i].code==code){
						if(this.YBmessageTable[i].all){
							let all=this.YBmessageTable[i].success+this.YBmessageTable[i].error;
							if(all==this.YBmessageTable[i].all){//判断该组是否发送完成
								this.YBmessageNum++;
								this.ybMessageStatus();
								return
							}
						}
						break
					}
				}
                service.post("/smsUserinfo/getMsgState",{
                    group_id: code
                }).then((res) => {
                    if(res.data.state==200){
                        let dataArray = res.data.records
                        let successNum = 0
                        let errorNum = 0
                        dataArray.forEach((item)=>{
                            if(item.report_status=="CM:0000"){//发送成功
                                successNum++
                            }else if(item.report_status==-1){//发送中
                            
                            }else{//发送失败
                                errorNum++
                            }
                        })
                        for(let j=0; j<this.YBmessageTable.length; j++){
                            if(this.YBmessageTable[j].code == code){
                                this.YBmessageTable[j].all = dataArray.length;
                                this.YBmessageTable[j].success = successNum;
                                this.YBmessageTable[j].error = errorNum;
                                break
                            }
                        }
                        this.YBmessageNum++
                        this.ybMessageStatus()
                    }               
                })
			}
		},
        // 循环判断短信状态
		switchMessageStatus(){
			if(!this.dialogVisible){
				return
			}
            service.post("/smsUserinfo/getMsgState",{
                group_id: this.messageObj.code
            }).then((res) => {
                if(res.data.state==200){
                    let dataArray = res.data.records
                    let flog = false
                    let successNum = 0
                    let errorNum = 0

                    dataArray.forEach((item)=>{
                        if(item.report_status == "CM:0000"){
                            item.status = "成功"
                            item.msg = ""
                            successNum++;
                        }else if(item.report_status == -1){
                            item.status = this.sendHtml
                            item.msg = ""
                            flog = true
                        }else{
                            item.status = "失败"
                            item.msg = item.report_msg
                            errorNum++
                        }
                    })
                    this.messageObj.table = dataArray
                    this.messageObj.all = dataArray.length
                    this.messageObj.success = successNum
                    this.messageObj.error = errorNum
                    if(flog){
                        setTimeout(()=>{
                            this.switchMessageStatus()
                        },5000)							
                    }else{
                        this.messageObj.loading = false
                        if(dataArray.length != successNum){
                            this.messageObj.btnShow = true
                        }else{
                            this.messageObj.btnShow = false
                        }
                    }
                }else{
                    this.messageObj.loading = false
					this.$message.error(`发送异常！`)
                }              
            })
		},
    },
};
</script>

<style lang="less" scoped>
.content {
    height: 100%;
    font-size: 14px;
    padding: 16px;
    & .box_card {
        height: 100%;
    }
    .header {
        padding-bottom: 20px;
    }
    .textareaClass {
        /deep/ textarea {
        resize: none;
        font-size: 18px;
        }
    }
    /**动态条纹**/
    div /deep/ .statusTbale .cont {
        width: 100%;
        position: relative;
    }
    div /deep/ .statusTbale .info {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
    }
    div /deep/ .statusTbale .twill {
        width: 100%;
        height: 15px;
        border-radius: 20px;
        background-size: 50px 50px;
    /*	background-image: linear-gradient(-45deg,#409EFF 0,#409EFF 25%,white 0,white 50%,#409EFF 0,#409EFF 75%,white 0,white 100%);*/
        background-image: linear-gradient(-45deg,rgba(67,231,167,0.5) 0,rgba(67,231,167,0.5) 5%,white 0,white 10%,rgba(67,231,167,0.5) 0,rgba(67,231,167,0.5) 15%,white 0,white 20%,rgba(67,231,167,0.5) 0,rgba(67,231,167,0.5) 25%,white 0,white 30%,rgba(67,231,167,0.5) 0,
        rgba(67,231,167,0.5) 35%,white 0,white 40%,rgba(67,231,167,0.5) 0,rgba(67,231,167,0.5) 45%,white 0,white 50%,rgba(67,231,167,0.5) 0,rgba(67,231,167,0.5) 55%,white 0,white 60%,rgba(67,231,167,0.5) 0,
        rgba(67,231,167,0.5) 65%,white 0,white 70%,rgba(67,231,167,0.5) 0,rgba(67,231,167,0.5) 75%,white 0,white 80%,rgba(67,231,167,0.5) 0,rgba(67,231,167,0.5) 85%,white 0,white 90%,rgba(67,231,167,0.5) 0,
        rgba(67,231,167,0.5) 95%,white 0,white 100%);
        animation: move 10s linear infinite;
    }
    @keyframes move {
        form{
            background-position-x: 0px;
        }
        to{
            background-position-x: 300px;
        }
    }
    /***短信发送弹出框***/
    div /deep/ .messageDialog{

    }
    div /deep/ .messageDialog .el-dialog__header{
        color: #fff;
        background-image: linear-gradient(
        270deg
        , #022B63 0%, rgba(29,158,255,0.56) 100%);
        padding:10px;
    }
    div /deep/ .messageDialog .el-dialog__header .el-dialog__title{
        color: #fff;
        font-size: 16px;
    }
    div /deep/ .messageDialog .el-dialog__header .el-dialog__headerbtn{
        top: 15px;
    }
    div /deep/ .messageDialog .el-dialog__body .line{
        width:100%;
        height:3px;
        margin:16px 0;
        background-image: url(../../assets/img/line.png);
        background-size:100% 100%;
    }
    div /deep/ .messageDialog .el-dialog__body{
        padding-bottom:20px;
    }
    .diaTop>p{
        padding-left: 10px;
        border-left: 2px solid #1D9EFF;
        margin-bottom: 16px;
    }
    .diaTopLeft ul{
        width: 100%;
        list-style: none;
    }
    .diaTopLeft ul::after{
        content: "";
        display: block;
        clear: both;
    }
    .diaTopLeft ul li{
        width: calc(100% / 3);
        float: left;
    }
    .diaTopLeft ul li span{
        font-size:12px;
    }
    .diaTopLeft div{
        height: 70px;
        border: 1px solid #77A2D7;
        padding: 10px;
        font-size: 12px;
        color: #333333;
        overflow: auto;
    }
}
</style>
